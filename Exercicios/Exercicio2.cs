using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using Serilog;

namespace projecteuler
{
    /// <summary>
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    ///1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    ///By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class Exercicio2 : ICommand
    {
        private readonly ILogger _logger;
        public Exercicio2(ILogger logger)
        {
            this._logger = logger;
        }

        public string Resolve()
        {
            var fibonnaciNumbers = GenerateFibonnaciList(4_000_000);
            var sum = fibonnaciNumbers
                .Where(f => IsEven(f))
                .Sum(f => f);
            Log.Information(sum.ToString());
            return sum.ToString();
        }
        /// <summary>
        /// Generates fibonacci using a stack and not recursivity, prefered approach for big values.
        /// </summary>
        /// <param name="maximumNumber">Maximum number of the fibonacci.</param>
        /// <returns>List with all fibonacci numbers.</returns>
        private static List<int> GenerateFibonnaciList(int maximumNumber)
        {
            var stack = new Stack<int>();
            stack.Push(1);
            stack.Push(2);
            while (stack.Peek() < maximumNumber)
            {
                var lastValue = stack.Peek();
                var secondToLastValue = stack.Skip(1).First();
                stack.Push(secondToLastValue + lastValue);
            }

            return stack.ToList();
        }

        private static bool IsEven(int number)
        {
            return number % 2 == 0;
        }
    }
}
