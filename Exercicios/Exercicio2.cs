using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace projecteuler.Exercicios
{
    /// <summary>
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    ///1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    ///By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class Exercicio2 : ExercicioBase, IComando
    {
        public Exercicio2(ILog log) : base(log) { }

        public string Resolver()
        {
            var numerosFibonnaci = GerarListaFibonnaci(4_000_000);
            var soma = numerosFibonnaci
                .Where(f => EhPar(f))
                .Sum(f => f);
            Log.Informacao(soma.ToString());
            return soma.ToString();
        }
        /// <summary>
        /// Gera fibonacci usando uma pilha e não recursividade, indicado para valores expressivos.
        /// </summary>
        /// <param name="numeroMaximo">Número máximo do fibonacci.</param>
        /// <returns>Listagem com todos os números de fibonacci.</returns>
        private static List<int> GerarListaFibonnaci(int numeroMaximo)
        {
            var pilha = new Stack<int>();
            pilha.Push(1);
            pilha.Push(2);
            while (pilha.Peek() < numeroMaximo)
            {
                var ultimoValor = pilha.Peek();
                var penultimoValor = pilha.Skip(1).First();
                pilha.Push(penultimoValor + ultimoValor);
            }

            return pilha.ToList();
        }

        private static bool EhPar(int numero)
        {
            return numero % 2 == 0;
        }


    }
}
